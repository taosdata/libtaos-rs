/* automatically generated by rust-bindgen 0.58.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const TSDB_DATA_TYPE_NULL: u32 = 0;
pub const TSDB_DATA_TYPE_BOOL: u32 = 1;
pub const TSDB_DATA_TYPE_TINYINT: u32 = 2;
pub const TSDB_DATA_TYPE_SMALLINT: u32 = 3;
pub const TSDB_DATA_TYPE_INT: u32 = 4;
pub const TSDB_DATA_TYPE_BIGINT: u32 = 5;
pub const TSDB_DATA_TYPE_FLOAT: u32 = 6;
pub const TSDB_DATA_TYPE_DOUBLE: u32 = 7;
pub const TSDB_DATA_TYPE_BINARY: u32 = 8;
pub const TSDB_DATA_TYPE_TIMESTAMP: u32 = 9;
pub const TSDB_DATA_TYPE_NCHAR: u32 = 10;
pub const TSDB_DATA_TYPE_UTINYINT: u32 = 11;
pub const TSDB_DATA_TYPE_USMALLINT: u32 = 12;
pub const TSDB_DATA_TYPE_UINT: u32 = 13;
pub const TSDB_DATA_TYPE_UBIGINT: u32 = 14;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type TAOS = ::std::os::raw::c_void;
pub type TAOS_STMT = ::std::os::raw::c_void;
pub type TAOS_RES = ::std::os::raw::c_void;
pub type TAOS_STREAM = ::std::os::raw::c_void;
pub type TAOS_SUB = ::std::os::raw::c_void;
pub type TAOS_ROW = *mut *mut ::std::os::raw::c_void;
pub const TSDB_OPTION_TSDB_OPTION_LOCALE: TSDB_OPTION = 0;
pub const TSDB_OPTION_TSDB_OPTION_CHARSET: TSDB_OPTION = 1;
pub const TSDB_OPTION_TSDB_OPTION_TIMEZONE: TSDB_OPTION = 2;
pub const TSDB_OPTION_TSDB_OPTION_CONFIGDIR: TSDB_OPTION = 3;
pub const TSDB_OPTION_TSDB_OPTION_SHELL_ACTIVITY_TIMER: TSDB_OPTION = 4;
pub const TSDB_OPTION_TSDB_MAX_OPTIONS: TSDB_OPTION = 5;
pub type TSDB_OPTION = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct taosField {
    pub name: [::std::os::raw::c_char; 65usize],
    pub type_: u8,
    pub bytes: i16,
}
#[test]
fn bindgen_test_layout_taosField() {
    assert_eq!(
        ::std::mem::size_of::<taosField>(),
        68usize,
        concat!("Size of: ", stringify!(taosField))
    );
    assert_eq!(
        ::std::mem::align_of::<taosField>(),
        2usize,
        concat!("Alignment of ", stringify!(taosField))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taosField>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(taosField),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taosField>())).type_ as *const _ as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(taosField),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<taosField>())).bytes as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(taosField),
            "::",
            stringify!(bytes)
        )
    );
}
pub type TAOS_FIELD = taosField;
extern "C" {
    pub fn taos_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_cleanup();
}
extern "C" {
    pub fn taos_options(
        option: TSDB_OPTION,
        arg: *const ::std::os::raw::c_void,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_connect(
        ip: *const ::std::os::raw::c_char,
        user: *const ::std::os::raw::c_char,
        pass: *const ::std::os::raw::c_char,
        db: *const ::std::os::raw::c_char,
        port: u16,
    ) -> *mut TAOS;
}
extern "C" {
    pub fn taos_close(taos: *mut TAOS);
}
extern "C" {
    pub fn taos_data_type(type_: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TAOS_BIND {
    pub buffer_type: ::std::os::raw::c_int,
    pub buffer: *mut ::std::os::raw::c_void,
    pub buffer_length: usize,
    pub length: *mut usize,
    pub is_null: *mut ::std::os::raw::c_int,
    pub is_unsigned: ::std::os::raw::c_int,
    pub error: *mut ::std::os::raw::c_int,
    pub u: TAOS_BIND__bindgen_ty_1,
    pub allocated: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TAOS_BIND__bindgen_ty_1 {
    pub ts: i64,
    pub b: i8,
    pub v1: i8,
    pub v2: i16,
    pub v4: i32,
    pub v8: i64,
    pub f4: f32,
    pub f8: f64,
    pub bin: *mut ::std::os::raw::c_uchar,
    pub nchar: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TAOS_BIND__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<TAOS_BIND__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(TAOS_BIND__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<TAOS_BIND__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(TAOS_BIND__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND__bindgen_ty_1>())).ts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND__bindgen_ty_1),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND__bindgen_ty_1>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND__bindgen_ty_1),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND__bindgen_ty_1>())).v1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND__bindgen_ty_1),
            "::",
            stringify!(v1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND__bindgen_ty_1>())).v2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND__bindgen_ty_1),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND__bindgen_ty_1>())).v4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND__bindgen_ty_1),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND__bindgen_ty_1>())).v8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND__bindgen_ty_1),
            "::",
            stringify!(v8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND__bindgen_ty_1>())).f4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND__bindgen_ty_1),
            "::",
            stringify!(f4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND__bindgen_ty_1>())).f8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND__bindgen_ty_1),
            "::",
            stringify!(f8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND__bindgen_ty_1>())).bin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND__bindgen_ty_1),
            "::",
            stringify!(bin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND__bindgen_ty_1>())).nchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND__bindgen_ty_1),
            "::",
            stringify!(nchar)
        )
    );
}
#[test]
fn bindgen_test_layout_TAOS_BIND() {
    assert_eq!(
        ::std::mem::size_of::<TAOS_BIND>(),
        72usize,
        concat!("Size of: ", stringify!(TAOS_BIND))
    );
    assert_eq!(
        ::std::mem::align_of::<TAOS_BIND>(),
        8usize,
        concat!("Alignment of ", stringify!(TAOS_BIND))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND>())).buffer_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND),
            "::",
            stringify!(buffer_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND>())).buffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND>())).buffer_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND),
            "::",
            stringify!(buffer_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND>())).length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND>())).is_null as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND),
            "::",
            stringify!(is_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND>())).is_unsigned as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND),
            "::",
            stringify!(is_unsigned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND>())).error as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND>())).u as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_BIND>())).allocated as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_BIND),
            "::",
            stringify!(allocated)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAOS_MULTI_BIND {
    pub buffer_type: ::std::os::raw::c_int,
    pub buffer: *mut ::std::os::raw::c_void,
    pub buffer_length: usize,
    pub length: *mut i32,
    pub is_null: *mut ::std::os::raw::c_char,
    pub num: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TAOS_MULTI_BIND() {
    assert_eq!(
        ::std::mem::size_of::<TAOS_MULTI_BIND>(),
        48usize,
        concat!("Size of: ", stringify!(TAOS_MULTI_BIND))
    );
    assert_eq!(
        ::std::mem::align_of::<TAOS_MULTI_BIND>(),
        8usize,
        concat!("Alignment of ", stringify!(TAOS_MULTI_BIND))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_MULTI_BIND>())).buffer_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_MULTI_BIND),
            "::",
            stringify!(buffer_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_MULTI_BIND>())).buffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_MULTI_BIND),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_MULTI_BIND>())).buffer_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_MULTI_BIND),
            "::",
            stringify!(buffer_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_MULTI_BIND>())).length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_MULTI_BIND),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_MULTI_BIND>())).is_null as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_MULTI_BIND),
            "::",
            stringify!(is_null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TAOS_MULTI_BIND>())).num as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TAOS_MULTI_BIND),
            "::",
            stringify!(num)
        )
    );
}
extern "C" {
    pub fn taos_stmt_init(taos: *mut TAOS) -> *mut TAOS_STMT;
}
extern "C" {
    pub fn taos_stmt_prepare(
        stmt: *mut TAOS_STMT,
        sql: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_stmt_set_tbname_tags(
        stmt: *mut TAOS_STMT,
        name: *const ::std::os::raw::c_char,
        tags: *mut TAOS_BIND,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_stmt_set_tbname(
        stmt: *mut TAOS_STMT,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn taos_stmt_set_sub_tbname(
        stmt: *mut TAOS_STMT,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_stmt_is_insert(
        stmt: *mut TAOS_STMT,
        insert: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_stmt_num_params(
        stmt: *mut TAOS_STMT,
        nums: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_stmt_get_param(
        stmt: *mut TAOS_STMT,
        idx: ::std::os::raw::c_int,
        type_: *mut ::std::os::raw::c_int,
        bytes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_stmt_bind_param(
        stmt: *mut TAOS_STMT,
        bind: *mut TAOS_BIND,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_stmt_bind_param_batch(
        stmt: *mut TAOS_STMT,
        bind: *mut TAOS_MULTI_BIND,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_stmt_bind_single_param_batch(
        stmt: *mut TAOS_STMT,
        bind: *mut TAOS_MULTI_BIND,
        colIdx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_stmt_add_batch(stmt: *mut TAOS_STMT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_stmt_execute(stmt: *mut TAOS_STMT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_stmt_use_result(stmt: *mut TAOS_STMT) -> *mut TAOS_RES;
}
extern "C" {
    pub fn taos_stmt_close(stmt: *mut TAOS_STMT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_stmt_errstr(stmt: *mut TAOS_STMT) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn taos_query(taos: *mut TAOS, sql: *const ::std::os::raw::c_char) -> *mut TAOS_RES;
}
extern "C" {
    pub fn taos_fetch_row(res: *mut TAOS_RES) -> TAOS_ROW;
}
extern "C" {
    pub fn taos_result_precision(res: *mut TAOS_RES) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_free_result(res: *mut TAOS_RES);
}
extern "C" {
    pub fn taos_field_count(res: *mut TAOS_RES) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_num_fields(res: *mut TAOS_RES) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_affected_rows(res: *mut TAOS_RES) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_fetch_fields(res: *mut TAOS_RES) -> *mut TAOS_FIELD;
}
extern "C" {
    pub fn taos_select_db(
        taos: *mut TAOS,
        db: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_print_row(
        str_: *mut ::std::os::raw::c_char,
        row: TAOS_ROW,
        fields: *mut TAOS_FIELD,
        num_fields: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_stop_query(res: *mut TAOS_RES);
}
extern "C" {
    pub fn taos_is_null(res: *mut TAOS_RES, row: i32, col: i32) -> bool;
}
extern "C" {
    pub fn taos_fetch_block(res: *mut TAOS_RES, rows: *mut TAOS_ROW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_validate_sql(
        taos: *mut TAOS,
        sql: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_fetch_lengths(res: *mut TAOS_RES) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_get_server_info(taos: *mut TAOS) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn taos_get_client_info() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn taos_errstr(tres: *mut TAOS_RES) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn taos_errno(tres: *mut TAOS_RES) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn taos_query_a(
        taos: *mut TAOS,
        sql: *const ::std::os::raw::c_char,
        fp: ::std::option::Option<
            unsafe extern "C" fn(
                param: *mut ::std::os::raw::c_void,
                arg1: *mut TAOS_RES,
                code: ::std::os::raw::c_int,
            ),
        >,
        param: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn taos_fetch_rows_a(
        res: *mut TAOS_RES,
        fp: ::std::option::Option<
            unsafe extern "C" fn(
                param: *mut ::std::os::raw::c_void,
                arg1: *mut TAOS_RES,
                numOfRows: ::std::os::raw::c_int,
            ),
        >,
        param: *mut ::std::os::raw::c_void,
    );
}
pub type TAOS_SUBSCRIBE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        tsub: *mut TAOS_SUB,
        res: *mut TAOS_RES,
        param: *mut ::std::os::raw::c_void,
        code: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    pub fn taos_subscribe(
        taos: *mut TAOS,
        restart: ::std::os::raw::c_int,
        topic: *const ::std::os::raw::c_char,
        sql: *const ::std::os::raw::c_char,
        fp: TAOS_SUBSCRIBE_CALLBACK,
        param: *mut ::std::os::raw::c_void,
        interval: ::std::os::raw::c_int,
    ) -> *mut TAOS_SUB;
}
extern "C" {
    pub fn taos_consume(tsub: *mut TAOS_SUB) -> *mut TAOS_RES;
}
extern "C" {
    pub fn taos_unsubscribe(tsub: *mut TAOS_SUB, keepProgress: ::std::os::raw::c_int);
}
extern "C" {
    pub fn taos_open_stream(
        taos: *mut TAOS,
        sql: *const ::std::os::raw::c_char,
        fp: ::std::option::Option<
            unsafe extern "C" fn(
                param: *mut ::std::os::raw::c_void,
                arg1: *mut TAOS_RES,
                row: TAOS_ROW,
            ),
        >,
        stime: i64,
        param: *mut ::std::os::raw::c_void,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> *mut TAOS_STREAM;
}
extern "C" {
    pub fn taos_close_stream(tstr: *mut TAOS_STREAM);
}
extern "C" {
    pub fn taos_load_table_info(
        taos: *mut TAOS,
        tableNameList: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    pub fn taos_schemaless_insert(
        taos: *mut TAOS,
        lines: *mut *mut std::os::raw::c_char,
        numLines: std::os::raw::c_int,
        protocol: std::os::raw::c_int,
        precision: std::os::raw::c_int,
    ) -> *mut TAOS_RES;
}
